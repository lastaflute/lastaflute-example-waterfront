<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.docksidestage</groupId>
	<artifactId>waterfront</artifactId>
	<version>1.0.0-SNAPSHOT</version>
	<packaging>war</packaging>

	<name>Waterfront</name>
	<description>example project for LastaFlute, ESFlute (with Elasticsearch)</description>
	<url>http://dbflute.org/lastaflute</url>
	<inceptionYear>2015</inceptionYear>

	<properties>
		<!-- Main Framework -->
		<dbflute.version>1.2.8</dbflute.version>
		<lastaflute.version>2.0.0-C-SNAPSHOT</lastaflute.version> <!-- #jakarta -->
		<lasta.taglib.version>2.0.0-A-SNAPSHOT</lasta.taglib.version> <!-- #jakarta -->
		<lasta.job.version>2.0.0-A-SNAPSHOT</lasta.job.version> <!-- #jakarta -->

		<!-- Partner Library -->
		<slf4j.version>1.7.36</slf4j.version>
		<log4j.version>2.17.1</log4j.version>
		<servlet.version>6.0.0</servlet.version> <!-- #jakarta -->
		<jsp.version>4.0.0</jsp.version> <!-- #jakarta -->
		<jstl.version>3.0.0</jstl.version> <!-- #jakarta -->
		<tomcat.boot.version>2.0.0-A-SNAPSHOT</tomcat.boot.version> <!-- #jakarta -->
		<tomcat.jasper.version>10.1.17</tomcat.jasper.version> <!-- #jakarta -->
		<h2.jdbc.version>1.4.200</h2.jdbc.version>
		<fesen.httpclient.version>2.13.0-SNAPSHOT</fesen.httpclient.version>

		<!-- GoodNeighbor Library -->
		<commons.lang.version>3.4</commons.lang.version>
		<commons.fileupload.version>2.0.0-M2</commons.fileupload.version> <!-- #jakarta -->

		<!-- Testing -->
		<junit.version>4.13.2</junit.version>
		<utflute.version>2.0.0-A-SNAPSHOT</utflute.version> <!-- #jakarta -->
		<testcontainers.version>1.16.2</testcontainers.version>
	</properties>

	<licenses>
		<license>
			<name>The Apache Software License, Version 2.0</name>
			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
		</license>
	</licenses>
	<organization>
		<name>The DBFlute Project</name>
		<url>http://dbflute.org/</url>
	</organization>

	<developers>
		<developer>
			<id>jflute</id>
			<timezone>+9</timezone>
		</developer>
	</developers>

	<build>
		<defaultGoal>war</defaultGoal>
		<finalName>${project.artifactId}</finalName>
		<pluginManagement>
			<plugins>
				<plugin>
					<artifactId>maven-compiler-plugin</artifactId>
					<version>3.12.1</version>
					<configuration>
						<release>21</release>
						<encoding>UTF-8</encoding>
					</configuration>
				</plugin>
				<plugin>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>2.8.2</version>
					<configuration>
						<updateReleaseInfo>true</updateReleaseInfo>
					</configuration>
				</plugin>
				<plugin>
					<artifactId>maven-site-plugin</artifactId>
					<configuration>
						<locales>en,ja</locales>
						<inputEncoding>UTF-8</inputEncoding>
						<outputEncoding>UTF-8</outputEncoding>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-war-plugin</artifactId>
					<version>3.4.0</version>
				</plugin>
				<plugin>
					<artifactId>maven-source-plugin</artifactId>
					<version>3.3.0</version>
					<executions>
						<execution>
							<id>source-jar</id>
							<phase>package</phase>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>3.6.3</version>
					<configuration>
						<encoding>UTF-8</encoding>
						<docencoding>UTF-8</docencoding>
						<charset>UTF-8</charset>
						<!-- you can avoid self-closing check e.g. br-tag (checked since java8) -->
						<!-- fixed but comment-out for emergency deploy -->
						<!-- <additionalparam>-Xdoclint:none</additionalparam> -->
					</configuration>
					<executions>
						<execution>
							<id>javadoc-jar</id>
							<phase>package</phase>
							<goals>
								<goal>jar</goal>
							</goals>
						</execution>
						<execution>
							<phase>site</phase>
							<goals>
								<goal>javadoc</goal>
							</goals>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.dbflute</groupId>
					<artifactId>dbflute-maven-plugin</artifactId>
					<version>1.1.0</version>
					<configuration>
						<clientProject>maihamadb</clientProject>
						<packageBase>org.docksidestage.dbflute</packageBase>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.eclipse.m2e</groupId>
					<artifactId>lifecycle-mapping</artifactId>
					<version>1.0.0</version>
					<configuration>
						<lifecycleMappingMetadata>
							<pluginExecutions>
								<pluginExecution>
									<pluginExecutionFilter>
										<groupId>org.apache.maven.plugins</groupId>
										<artifactId>maven-dependency-plugin</artifactId>
										<versionRange>[0,)</versionRange>
										<goals>
											<goal>unpack-dependencies</goal>
										</goals>
									</pluginExecutionFilter>
									<action>
										<ignore /> <!-- to avoid warning -->
									</action>
								</pluginExecution>
							</pluginExecutions>
						</lifecycleMappingMetadata>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>unpack-boot</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>unpack-dependencies</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.build.directory}/${project.build.finalName}</outputDirectory>
							<includeArtifactIds>
								javax.servlet-api, javax.servlet.jsp, javax.servlet.jsp-api
								, tomcat-boot, tomcat-embed-core, tomcat-embed-logging-juli
								, tomcat-jasper, tomcat-jasper-el, tomcat-el-api, tomcat-jsp-api, ecj
							</includeArtifactIds>
							<overWriteReleases>true</overWriteReleases>
							<overWriteSnapshots>true</overWriteSnapshots>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<packagingExcludes>
						WEB-INF/lib/javax.servlet-api-*.jar, WEB-INF/lib/javax.servlet.jsp-*.jar
						, WEB-INF/lib/tomcat-*.jar, WEB-INF/lib/ecj-*.jar
					</packagingExcludes>
					<webResources>
						<resource>
							<directory>${project.build.outputDirectory}</directory>
							<includes>
								<include>**/*Boot*.class</include>
								<!-- properties may be used by the boot class -->
								<include>*_config.properties</include>
								<include>*_env*.properties</include>
								<include>tomcat_*.properties</include>
							</includes>
						</resource>
					</webResources>
					<archive>
						<manifest>
							<mainClass>org.docksidestage.WaterfrontBoot</mainClass>
						</manifest>
					</archive>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<repositories>
		<repository>
			<id>sonatype-oss-public</id>
			<url>https://oss.sonatype.org/content/groups/public/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
		<repository>
			<id>codelibs</id>
			<url>https://maven.codelibs.org/</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>

	<dependencies>
		<!-- = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = -->
		<!--                                                                Main Framework -->
		<!--                                                                 = = = = = = = -->
		<!-- dbflute -->
		<dependency>
			<groupId>org.dbflute</groupId>
			<artifactId>dbflute-runtime</artifactId>
			<version>${dbflute.version}</version>
		</dependency>
		<dependency> <!-- #pending will be deleted after migration to elasticsearch -->
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>${h2.jdbc.version}</version>
			<scope>runtime</scope>
		</dependency>
		<!-- elasticsearch/opensearch client -->
		<dependency>
			<groupId>org.codelibs.fesen.client</groupId>
			<artifactId>fesen-httpclient</artifactId>
			<version>${fesen.httpclient.version}</version>
		</dependency>

		<!-- lastaflute -->
		<dependency>
			<groupId>org.lastaflute</groupId>
			<artifactId>lastaflute</artifactId>
			<version>${lastaflute.version}</version>
		</dependency>
		<dependency> <!-- Lasta Di uses instead of Nashorn removed since java15 -->
			<groupId>org.codelibs</groupId>
			<artifactId>sai</artifactId>
			<version>0.2.0</version>
		</dependency>
		<dependency>
			<groupId>org.lastaflute.html</groupId>
			<artifactId>lasta-taglib</artifactId>
			<version>${lasta.taglib.version}</version>
		</dependency>
		<dependency>
			<groupId>org.lastaflute.job</groupId>
			<artifactId>lasta-job</artifactId>
			<version>${lasta.job.version}</version>
		</dependency>

		<!-- = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = -->
		<!--                                                               Partner Library -->
		<!--                                                               = = = = = = = = -->
		<!-- transaction -->
		<dependency> <!-- Lasta Di uses e.g. TransactionManager -->
			<groupId>jakarta.transaction</groupId> <!-- #jakarta -->
			<artifactId>jakarta.transaction-api</artifactId>
			<version>2.0.1</version>
		</dependency>

		<!-- annotation -->
		<dependency> <!-- Lasta Di uses e.g. @Resource -->
			<groupId>jakarta.annotation</groupId> <!-- #jakarta -->
			<artifactId>jakarta.annotation-api</artifactId>
			<version>2.1.1</version>
			<scope>provided</scope> <!-- existing in jetty/tomcat -->
		</dependency>

		<!-- logging -->
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<version>${slf4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-api</artifactId>
			<version>${log4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-core</artifactId>
			<version>${log4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-jcl</artifactId>
			<version>${log4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-1.2-api</artifactId>
			<version>${log4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-slf4j-impl</artifactId>
			<version>${log4j.version}</version>
		</dependency>
		<dependency>
			<groupId>org.apache.logging.log4j</groupId>
			<artifactId>log4j-jul</artifactId>
			<version>${log4j.version}</version>
		</dependency>

		<!-- servlet -->
		<dependency>
			<groupId>jakarta.servlet</groupId> <!-- #jakarta -->
			<artifactId>jakarta.servlet-api</artifactId>
			<version>${servlet.version}</version>
			<scope>provided</scope> <!-- existing in jetty/tomcat -->
		</dependency>
		<dependency>
			<groupId>jakarta.servlet.jsp</groupId>
			<artifactId>jakarta.servlet.jsp-api</artifactId>
			<version>${jsp.version}</version>
		</dependency>
		<dependency> <!-- tomcat does not provides, jetty's two jar files so here -->
			<groupId>jakarta.servlet.jsp.jstl</groupId> <!-- #jakarta -->
			<artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
			<version>${jstl.version}</version>
			<!-- should be as jar file in executable war to detect tld files -->
			<scope>runtime</scope>
			<exclusions>
				<exclusion> <!-- tomcat has -->
					<groupId>jakarta.el</groupId>
					<artifactId>jakarta.el-api</artifactId>
				</exclusion>
				<exclusion>
					<groupId>jakarta.servlet</groupId>
					<artifactId>jakarta.servlet-api</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>org.glassfish.web</groupId> <!-- #jakarta needed as jstl tld and implementation -->
			<artifactId>jakarta.servlet.jsp.jstl</artifactId> <!-- also contains taglibs.standard -->
			<version>${jstl.version}</version>
		</dependency>

		<!-- tomcat -->
		<dependency>
			<groupId>org.dbflute.tomcat</groupId>
			<artifactId>tomcat-boot</artifactId>
			<version>${tomcat.boot.version}</version>
		</dependency>
		<dependency> <!-- for jsp -->
			<groupId>org.apache.tomcat</groupId> <!-- #jakarta -->
			<artifactId>tomcat-jasper</artifactId>
			<version>${tomcat.jasper.version}</version>
		</dependency>

		<!-- = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = -->
		<!--                                                          GoodNeighbor Library -->
		<!--                                                           = = = = = = = = = = -->
		<!-- commons: lang -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>${commons.lang.version}</version>
		</dependency>
		<dependency> <!-- used for multipart request -->
			<groupId>org.apache.commons</groupId> <!-- #jakarta -->
			<artifactId>commons-fileupload2-jakarta-servlet6</artifactId> <!-- #jakarta -->
			<version>${commons.fileupload.version}</version>
		</dependency>

		<!-- = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = -->
		<!--                                                                       Testing -->
		<!--                                                                       = = = = -->
		<!-- unit test -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
            <exclusions>
            	<exclusion> <!-- unneeded for this project -->
            		<groupId>org.hamcrest</groupId>
            		<artifactId>hamcrest-core</artifactId>
            	</exclusion>
            </exclusions>
		</dependency>
		<dependency>
			<groupId>org.dbflute.utflute</groupId>
			<artifactId>utflute-lastaflute</artifactId>
			<version>${utflute.version}</version>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>org.testcontainers</groupId>
			<artifactId>junit-jupiter</artifactId>
			<version>${testcontainers.version}</version>
			<scope>test</scope>
		</dependency>
	</dependencies>
</project>
